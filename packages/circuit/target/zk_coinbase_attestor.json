{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"9920653168366969335","abi":{"parameters":[{"name":"digest","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"calldata","type":{"kind":"array","length":36,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"user_sig","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"coinbase_sig","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"user_pubkey_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"user_pubkey_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"coinbase_pubkey_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"coinbase_pubkey_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"ndPNioMwFEDhd8naRW78SdJXGYZibVqEoJLqwFD67hOdU9ouCsOsTjW9HyrJVR3DYTnv++E0XtTu46oOqY+xP+/j2LVzPw757vVWqPvlfk4h5FvqaT1PTW0Kw6x2wxJjob7auGx/ukztsHVuU17VhQrDMTeDpz6G9deteEzr96O+Ngx7/xivX+fl/bzRugEwWsqH8NcHEK0rANGVefcI5b8e4TNftF2fXr66Mo3e3sk0Qg0taUVr2lBLHfW/tXgWz+JZPItn8SyexbN4Fs/hOTyH5/AcnsNzeA7P4Tk8j+fxvNk+qPElrWhNG2qpo35rqTUVamhJK1rThlrqKJ7gCZ7gCZ7gCZ7gCZ7gCZ7BM3gGz6zebd1JqW8PMXAGT8vQPR3J+Xu6r9wP7ZTGLhyXFNaNtK3lrfUD","file_map":{"50":{"source":"use std::ecdsa_secp256k1::verify_signature;\nuse dep::ecrecover::ecrecover;\n\nglobal COINBASE_PUBKEY_X: [u8; 32] = [\n    110, 2, 155, 136, 43, 202, 15, 113,\n    253, 226, 124, 73, 244, 53, 240,\n    157, 69, 141, 81, 241, 61, 245, 141,\n    63, 184, 147, 52, 148, 64, 19, 199, 198\n];\n\nglobal COINBASE_PUBKEY_Y: [u8; 32] = [\n    39, 57, 45, 60, 108, 85, 171, 1,\n    112, 223, 37, 76, 109, 91, 178, 131,\n    212, 100, 46, 216, 65, 17, 184, 195,\n    43, 158, 154, 14, 0, 147, 58, 140\n];\n\nfn main(\n    digest: [u8; 32],\n\n    calldata: [u8; 36],               // attestation calldata\n    user_sig: [u8; 64],               // user's signature over digest\n    coinbase_sig: [u8; 64],           // signature from Coinbase attestor over digest\n\n    user_pubkey_x: [u8; 32],\n    user_pubkey_y: [u8; 32],\n\n    coinbase_pubkey_x: pub [u8; 32],  // public input for verification\n    coinbase_pubkey_y: pub [u8; 32],\n) {\n    // Step 1: verify Coinbase pubkey\n    assert(coinbase_pubkey_x == COINBASE_PUBKEY_X);\n    assert(coinbase_pubkey_y == COINBASE_PUBKEY_Y);\n\n    // Step 2: verify digest was signed by Coinbase attestor\n    // let verified_cb = verify_signature(\n    //     coinbase_pubkey_x,\n    //     coinbase_pubkey_y,\n    //     coinbase_sig,\n    //     digest\n    // );\n    // assert(verified_cb);\n\n    // // Step 3: verify digest was signed by user\n    // let user_address = ecrecover(\n    //     user_pubkey_x,\n    //     user_pubkey_y,\n    //     user_sig,\n    //     digest,\n    // );\n    // let addr_in_calldata = extract_address_from_calldata(calldata);\n    // assert(user_address == addr_in_calldata);\n\n    // Step 4: enforce function selector == `attestAccount(address)` -> 0x56feed5e\n    // assert(calldata[0] == 0x56);\n    // assert(calldata[1] == 0xfe);\n    // assert(calldata[2] == 0xed);\n    // assert(calldata[3] == 0x5e);\n}\n\n// pub fn extract_address_from_calldata(calldata: [u8; 36]) -> Field {\n//     let mut addr: Field = 0;\n//     for i in 0..20 {\n//         let byte = calldata[i + 16];\n//         addr = addr * 256.into() + byte.into();\n//     }\n//     addr\n// }","path":"/Users/sooyounghyun/Desktop/dev/zk-coinbase-attestor/packages/circuit/src/main.nr"}},"names":["main"],"brillig_names":[]}