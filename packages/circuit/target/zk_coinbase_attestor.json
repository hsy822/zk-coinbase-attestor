{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"18390530334263612424","abi":{"parameters":[{"name":"digest","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"calldata","type":{"kind":"array","length":36,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"user_sig","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"coinbase_sig","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"user_pubkey_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"user_pubkey_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"coinbase_pubkey_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"coinbase_pubkey_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"tdbdiuIwGIDhe+mxB/n9vmRuZVmkah0KpUpHBxaZe99EX+t44LIoc/S2jXkI0oSemk23Or4v+3G7+2jefp2a1dQPQ/++HHbr9tDvxvL09LVorrfLw9R15VHzbbzM2rdTNx6at/E4DIvmsx2O5x997Nvx3EM7lVGzaLpxU1rAbT909eprcZttHk/N0TE559v0eD/fPp7vjBEAZ6y/Cf+7AGtMALAmuEdL8D+5BOvydQku+EdL+JfgosyC6DOC6CxIelnI8RlBzfw/qDMvC+kpIbhZiP5VQexTgsZZSPKqkMOd8Lvctet+ujsJmvICnfeZi0oTzZeKoZY66mmgkeIJnuAJnuIpnuIpnuIpnuIpnuIpXsJLeAkv4SW8hJfwEl5K503uUr40G2qpo54GGqlQpXj54nljqKWOehpopEKVJopn8SyexbN4Fs/iWTyLZ/EsniterLXUUU8DjVSo0kTzpR7P43k8j+fxPJ7H83gez+MFvIAX8AJewAt4AS/gBbyAF/EiXsSLeBEv4kW8iBfxIp7gCZ7gCZ7gCZ7gCZ7gCZ7iKZ7iKZ7iKZ7iKZ7iKV7Cq/tDaouXauv+MPWibhBXL+oOqWfGZzv17Wro+FTYHsf1ty+Hw5/9deT6bbGfdutuc5y6eracx8pp8xc=","file_map":{"50":{"source":"use std::ecdsa_secp256k1::verify_signature;\nuse dep::ecrecover::ecrecover;\n\nglobal COINBASE_PUBKEY_X: [u8; 32] = [\n    110, 2, 155, 136, 43, 202, 15, 113,\n    253, 226, 124, 73, 244, 53, 240,\n    157, 69, 141, 81, 241, 61, 245, 141,\n    63, 184, 147, 52, 148, 64, 19, 199, 198\n];\n\nglobal COINBASE_PUBKEY_Y: [u8; 32] = [\n    39, 57, 45, 60, 108, 85, 171, 1,\n    112, 223, 37, 76, 109, 91, 178, 131,\n    212, 100, 46, 216, 65, 17, 184, 195,\n    43, 158, 154, 14, 0, 147, 58, 140\n];\n\nfn main(\n    digest: [u8; 32],\n\n    calldata: [u8; 36],               // attestation calldata\n    user_sig: [u8; 64],               // user's signature over digest\n    coinbase_sig: [u8; 64],           // signature from Coinbase attestor over digest\n\n    user_pubkey_x: [u8; 32],\n    user_pubkey_y: [u8; 32],\n\n    coinbase_pubkey_x: pub [u8; 32],  // public input for verification\n    coinbase_pubkey_y: pub [u8; 32],\n) {\n    // Step 1: verify Coinbase pubkey\n    assert(coinbase_pubkey_x == COINBASE_PUBKEY_X);\n    assert(coinbase_pubkey_y == COINBASE_PUBKEY_Y);\n\n    // Step 2: verify digest was signed by Coinbase attestor\n    let verified_cb = verify_signature(\n        coinbase_pubkey_x,\n        coinbase_pubkey_y,\n        coinbase_sig,\n        digest\n    );\n    assert(verified_cb);\n\n    // // Step 3: verify digest was signed by user\n    // let user_address = ecrecover(\n    //     user_pubkey_x,\n    //     user_pubkey_y,\n    //     user_sig,\n    //     digest,\n    // );\n    // let addr_in_calldata = extract_address_from_calldata(calldata);\n    // assert(user_address == addr_in_calldata);\n\n    // Step 4: enforce function selector == `attestAccount(address)` -> 0x56feed5e\n    assert(calldata[0] == 0x56);\n    assert(calldata[1] == 0xfe);\n    assert(calldata[2] == 0xed);\n    assert(calldata[3] == 0x5e);\n}\n\npub fn extract_address_from_calldata(calldata: [u8; 36]) -> Field {\n    let mut addr: Field = 0;\n    for i in 0..20 {\n        let byte = calldata[i + 16];\n        addr = addr * 256.into() + byte.into();\n    }\n    addr\n}","path":"/Users/sooyounghyun/Desktop/dev/zk-coinbase-attestor/packages/circuit/src/main.nr"}},"names":["main"],"brillig_names":[]}